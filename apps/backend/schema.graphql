type User {
  id: ID!
  email: String!
  emailVerified: Boolean!
  notificationsEnabled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Experience {
  id: ID!
  name: String!
  bio: String!
  cost: Float!
  city: String!
  date: DateTime!
  carouselPhotos: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EmailInput {
  email: String!
}

input VerifyCodeInput {
  email: String!
  code: String!
}

input CreateExperienceInput {
  name: String!
  bio: String!
  cost: Float!
  city: String!
  date: DateTime!
  carouselPhotos: [String!]!
}

type AuthResponse {
  success: Boolean!
  error: String
  user: User
  token: String
  isNewUser: Boolean
}

type UpdateResponse {
  success: Boolean!
  error: String
  user: User
}

type Query {
  me: User
  experience(id: ID!): Experience
  feedExperiences: [Experience!]!
}

type Mutation {
  createUserOrLoginUser(input: EmailInput!): AuthResponse!
  verifyCode(input: VerifyCodeInput!): AuthResponse!
  updateNotifications(enabled: Boolean!): UpdateResponse!
  updateExperienceInteraction(experienceId: ID!, isInterested: Boolean!): Experience
  createExperience(input: CreateExperienceInput!): Experience!
}

scalar DateTime
scalar JSON
